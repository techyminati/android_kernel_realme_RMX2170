/**********************************************************************************
* Copyright (c)  2008-2019  Guangdong OPPO Mobile Comm Corp., Ltd
* VENDOR_EDIT
* Description: OPPO Charge Module Device Tree
* 
* Version: 1.0
* Date: 2019-06-10
* ------------------------------ Revision History: --------------------------------
* <version>           <date>                <author>                            <desc>
*                   2019-07-03            Yichun.Chen                     add common function
***********************************************************************************/
#ifndef __OP_CHARGE_H__
#define __OP_CHARGE_H__

struct ntc_table {
	int resistance;		/* ohm */
	int temperature;	/* 0.1*celsius */
};

struct usb_temp {
	int temperature;	/* 0.1*celsius */
	int interval;		/* ms */
};

#define ADC_SAMPLE_COUNT		5
#define ADC_SAMPLE_INTERVAL		10

#define PULL_UP_VOLTAGE_1800MV		1800	/* 1800mV */
#define PULL_UP_RESISTANCE_51KOHM	51000	/* 51kohm */

#define DETECT_INTERVAL_50MS		50	/* detect interval 50ms */
#define DETECT_INTERVAL_300MS		300	/* detect interval 300ms */
#define VALID_LOW_TEMPERATURE		200	/* 20C - 100C */
#define VALID_HIGH_TEMPERATURE		1000	/* 20C - 100C */
#define CRITICAL_TEMPERATURE		570	/* 57C */
#define CRITICAL_USBTEMP_ABOVE_BATTEMP	100	/* usb_temp - bat_temp >= 10C */
#define CRITICAL_USBTEMP_ABOVE_BATTEMP_1	120	/* usb_temp - bat_temp >= 12C */
#define CRITICAL_USBTEMP_ABOVE_BATTEMP_2	180	/* usb_temp - bat_temp >= 18C */
#define CRITICAL_RISE_TEMPERATURE	30	/* rise 3Celsius in 1500ms */
#define CRITICAL_RISE_INTERVAL		1500	/* rise 3Celsius in 1500ms */
#define TEMPERATURE_LIST_LENGTH		30	/* 1.5s / 50ms */

struct usb_temp temperature_list1[TEMPERATURE_LIST_LENGTH];	/* length = 1.5s / 50ms */
struct usb_temp temperature_list2[TEMPERATURE_LIST_LENGTH];	/* length = 1.5s / 50ms */

/*func:				check if dischg_enable
*temperature1 temperature2:	usb_temp (0.1*Celsius)
*critical_rise1 critical_rise2:	if rise 3Cesius in 1500ms
*bat_temp:			bat_temp (0.1*Celsius)
*dischg_enable:			dischg_enable		*/
#define check_dischg_enable(temperature1, temperature2, critical_rise1, critical_rise2, bat_temp, dischg_enable)	\
	do {														\
		dischg_enable = false;											\
		if (temperature1 >= VALID_LOW_TEMPERATURE && temperature1 <= VALID_HIGH_TEMPERATURE) {			\
			if (temperature1 >= CRITICAL_TEMPERATURE)							\
				dischg_enable = true;									\
			if (temperature1 - bat_temp >= CRITICAL_USBTEMP_ABOVE_BATTEMP && critical_rise1 == true)	\
				dischg_enable = true;									\
		}													\
		if (temperature2 >= VALID_LOW_TEMPERATURE && temperature2 <= VALID_HIGH_TEMPERATURE) {			\
			if (temperature2 >= CRITICAL_TEMPERATURE)							\
				dischg_enable = true;									\
			if (temperature2 - bat_temp >= CRITICAL_USBTEMP_ABOVE_BATTEMP && critical_rise2 == true)	\
				dischg_enable = true;									\
		}													\
	} while (0)

/*temp1 temp2:	usb_temp (0.1*Celsius)
*time:		thread interval (ms)
*i:		index of ntc_table	*/
#define add_temperature_list(temp1, temp2, time, i)							\
	do {												\
		for (i = TEMPERATURE_LIST_LENGTH - 1; i > 0; i --) {					\
			temperature_list1[i].temperature = temperature_list1[i - 1].temperature;	\
			temperature_list1[i].interval = temperature_list1[i - 1].interval;		\
			temperature_list2[i].temperature = temperature_list2[i - 1].temperature;	\
			temperature_list2[i].interval = temperature_list2[i - 1].interval;		\
		}											\
		temperature_list1[0].temperature = temp1;						\
		temperature_list1[0].interval = time;							\
		temperature_list2[0].temperature = temp2;						\
		temperature_list2[0].interval = time;							\
	} while (0)

/* check if rise 3Cesius within 1500ms */
#define check_temperature_list(list, total_time, critical_rise, i)					\
	do {												\
		critical_rise = false;									\
		total_time = 0;										\
		for (i = 0; i < TEMPERATURE_LIST_LENGTH; i ++) {					\
			total_time += list[i].interval;							\
			if (list[i].temperature == 0 && list[i].interval == 0)				\
				break;									\
			if (total_time - list[i].interval >= CRITICAL_RISE_INTERVAL)			\
				break;									\
			if (list[0].temperature - list[i].temperature >= CRITICAL_RISE_TEMPERATURE) {	\
				critical_rise = true;							\
				break;									\
			}										\
		}											\
	} while (0)

#define clear_temperature_list(i)					\
	do {								\
		for (i = 0; i < TEMPERATURE_LIST_LENGTH; i ++) {	\
			temperature_list1[i].temperature = 0;		\
			temperature_list1[i].interval = 0;		\
			temperature_list2[i].temperature = 0;		\
			temperature_list2[i].interval = 0;		\
		}							\
	} while (0)

/*R:	NTC resistance (ohm)
*T:	NTC temperature (0.1*Celsius)
*L:	ARRAY_SIZE(ntc_table)
*i:	index of ntc_table
*table:	ntc_table		*/
#define resistance_convert_temperature(R, T, i, table)			\
	do {								\
		for (i = 0; i < ARRAY_SIZE(table); i ++)		\
			if (table[i].resistance <= R)			\
				break;					\
		if (i == 0)						\
			T = table[0].temperature;			\
		else if (i == ARRAY_SIZE(table))			\
			T = table[ARRAY_SIZE(table) - 1].temperature;	\
		else						\
			T = table[i].temperature * (R - table[i - 1].resistance) / (table[i].resistance - table[i - 1].resistance) +	\
				table[i - 1].temperature * (table[i].resistance - R) / (table[i].resistance - table[i - 1].resistance);	\
	} while (0)

/*vadc:			usb_temp_adc voltage (mV)
*pull_up_voltage:	pull_up_voltage (mV)
*pull_up_resistance:	pull_up_resistance (ohm)	*/
#define voltage_convert_resistance(vadc, pull_up_voltage, pull_up_resistance)	\
	(pull_up_resistance / (pull_up_voltage - vadc) * vadc)

/* ntc1 100Kohm when 25c */
struct ntc_table ntc_table_100K[] = {
	/* {ohm, 0.1*celsius} */
#ifndef ODM_LQ_EDIT
/* Hongbin.Chen  ODM_LQ.BSP.CHG  2019-11-25  update ntc RT table */
	{4251000, -400},	{3962000, -390},	{3695000, -380},	{3447000, -370},	{3218000, -360},
	{3005000, -350},	{2807000, -340},	{2624000, -330},	{2454000, -320},	{2296000, -310},
	{2149000, -300},	{2012000, -290},	{1885000, -280},	{1767000, -270},	{1656000, -260},
	{1554000, -250},	{1458000, -240},	{1369000, -230},	{1286000, -220},	{1208000, -210},
	{1135000, -200},	{1068000, -190},	{1004000, -180},	{945000, -170},		{889600, -160},
	{837800, -150},		{789300, -140},		{743900, -130},		{701300, -120},		{661500, -110},
	{624100, -100},		{589000, -90},		{556200, -80},		{525300, -70},		{496300, -60},
	{469100, -50},		{443500, -40},		{419500, -30},		{396900, -20},		{375600, -10},
	{355600, 00},		{336800, 10},		{319100, 20},		{302400, 30},		{286700, 40},
	{271800, 50},		{257800, 60},		{244700, 70},		{232200, 80},		{220500, 90},
	{209400, 100},		{198900, 110},		{189000, 120},		{179700, 130},		{170900, 140},
	{162500, 150},		{154600, 160},		{147200, 170},		{140100, 180},		{133400, 190},
	{127000, 200},		{121000, 210},		{115400, 220},		{110000, 230},		{104800, 240},
	{100000, 250},		{95400, 260},		{91040, 270},		{86900, 280},		{82970, 290},
	{79230, 300},		{75690, 310},		{72320, 320},		{69120, 330},		{66070, 340},
	{63180, 350},		{60420, 360},		{57810, 370},		{55310, 380},		{52940, 390},
	{50680, 400},		{48530, 410},		{46490, 420},		{44530, 430},		{42670, 440},
	{40900, 450},		{39210, 460},		{37600, 470},		{36060, 480},		{34600, 490},
	{33190, 500},		{31860, 510},		{30580, 520},		{29360, 530},		{28200, 540},
	{27090, 550},		{26030, 560},		{25010, 570},		{24040, 580},		{23110, 590},
	{22220, 600},		{21370, 610},		{20560, 620},		{19780, 630},		{19040, 640},
	{18320, 650},		{17640, 660},		{16990, 670},		{16360, 680},		{15760, 690},
	{15180, 700},		{14630, 710},		{14100, 720},		{13600, 730},		{13110, 740},
	{12640, 750},		{12190, 760},		{11760, 770},		{11350, 780},		{10960, 790},
	{10580, 800},		{10210, 810},		{9859, 820},		{9522, 830},		{9198, 840},
	{8887, 850},		{8587, 860},		{8299, 870},		{8022, 880},		{7756, 890},
	{7500, 900},		{7254, 910},		{7016, 920},		{6788, 930},		{6568, 940},
	{6357, 950},		{6153, 960},		{5957, 970},		{5768, 980},		{5586, 990},
	{5410, 1000},		{5241, 1010},		{5078, 1020},		{4921, 1030},		{4769, 1040},
	{4623, 1050},		{4482, 1060},		{4346, 1070},		{4215, 1080},		{4088, 1090},
	{3966, 1100},		{3848, 1110},		{3734, 1120},		{3624, 1130},		{3518, 1140},
	{3415, 1150},		{3316, 1160},		{3220, 1170},		{3128, 1180},		{3038, 1190},
	{2952, 1200},		{2868, 1210},		{2787, 1220},		{2709, 1230},		{2634, 1240},
	{2561, 1250},
#else
	{4429000, -400},	{4133000, -390},	{3857000, -380},	{3595000, -370},	{3352000, -360},
	{3132000, -350},	{2924000, -340},	{2733000, -330},	{2556000, -320},	{2389000, -310},
	{2236000, -300},	{2100000, -290},	{1960000, -280},	{1837000, -270},	{1722000, -260},
	{1614000, -250},	{1514000, -240},	{1421000, -230},	{1334000, -220},	{1259000, -210},
	{1177000, -200},	{1114000, -190},	{1038000, -180},	{976100, -170},		{919200, -160},
	{865400, -150},		{819400, -140},		{767200, -130},		{723500, -120},		{681800, -110},
	{642900, -100},		{606800, -90},		{574600, -80},		{543100, -70},		{512200, -60},
	{485200, -50},		{455400, -40},		{430400, -30},		{406700, -20},		{384300, -10},
	{365600, 00},		{345500, 10},		{326900, 20},		{309700, 30},		{293800, 40},
	{278500, 50},		{264400, 60},		{250100, 70},		{237400, 80},		{226400, 90},
	{214500, 100},		{203000, 110},		{192800, 120},		{183100, 130},		{174100, 140},
	{165400, 150},		{157400, 160},		{150000, 170},		{142600, 180},		{135700, 190},
	{129800, 200},		{123200, 210},		{117200, 220},		{111800, 230},		{104800, 240},
	{100000, 250},		{95470, 260},		{91260, 270},		{86980, 280},		{83080, 290},
	{79400, 300},		{75940, 310},		{72430, 320},		{69210, 330},		{66200, 340},
	{63400, 350},		{60560, 360},		{58040, 370},		{55420, 380},		{53030, 390},
	{50770, 400},		{48680, 410},		{46790, 420},		{44830, 430},		{42720, 440},
	{40930, 450},		{39220, 460},		{37620, 470},		{36060, 480},		{34590, 490},
	{33190, 500},		{31850, 510},		{30560, 520},		{29340, 530},		{28170, 540},
	{27050, 550},		{25980, 560},		{24970, 570},		{24000, 580},		{23060, 590},
	{22160, 600},		{21310, 610},		{20490, 620},		{19730, 630},		{18970, 640},
	{18250, 650},		{17570, 660},		{16920, 670},		{16290, 680},		{15700, 690},
	{15110, 700},		{14560, 710},		{14030, 720},		{13520, 730},		{13040, 740},
	{12590, 750},		{12130, 760},		{11720, 770},		{11290, 780},		{10900, 790},
	{10510, 800},		{10140, 810},		{9779, 820},		{9454, 830},		{9134, 840},
	{8814, 850},		{8521, 860},		{8224, 870},		{7952, 880},		{7689, 890},
	{7421, 900},		{7179, 910},		{6946, 920},		{6709, 930},		{6492, 940},
	{6283, 950},		{6081, 960},		{5877, 970},		{5689, 980},		{5508, 990},
	{5335, 1000},		{5167, 1010},		{5004, 1020},		{4839, 1030},		{4690, 1040},
	{4546, 1050},		{4401, 1060},		{4267, 1070},		{4135, 1080},		{4010, 1090},
	{3887, 1100},		{3771, 1110},		{3656, 1120},		{3546, 1130},		{3441, 1140},
	{3339, 1150},		{3240, 1160},		{3144, 1170},		{3053, 1180},		{2964, 1190},
	{2878, 1200},		{2796, 1210},		{2715, 1220},		{2640, 1230},		{2562, 1240},
	{2493, 1250},
#endif
};

/* ntc2 10Kohm when 25c */
struct ntc_table ntc_table_10K[] = {
	/* {ohm, 0.1*celsius} */
	{0, 0},
};

int con_volt[] = {
	1721,
	1716,
	1710,
	1704,
	1697,
	1690,
	1683,
	1675,
	1667,
	1658,
	1649,
	1640,
	1630,
	1620,
	1609,
	1597,
	1586,
	1573,
	1560,
	1547,
	1533,
	1519,
	1504,
	1488,
	1472,
	1456,
	1438,
	1421,
	1403,
	1384,
	1365,
	1346,
	1326,
	1305,
	1285,
	1263,
	1242,
	1220,
	1198,
	1176,
	1153,
	1130,
	1107,
	1084,
	1061,
	1038,
	1014,
	991,
	967,
	944,
	921,
	898,
	875,
	852,
	829,
	807,
	785,
	763,
	741,
	720,
	699,
	678,
	658,
	638,
	619,
	600,
	581,
	563,
	545,
	527,
	510,
	494,
	477,
	462,
	446,
	432,
	417,
	403,
	389,
	376,
	363,
	351,
	339,
	327,
	316,
	305,
	295,
	284,
	274,
	265,
	256,
	247,
	238,
	230,
	222,
	214,
	207,
	200,
	193,
	186,
	180,
	173,
	167,
	162,
	156,
	151,
	145,
	140,
	136,
	131,
	127,
	122,
	118,
	114,
	110,
	106,
	103,
	99,
	96,
	93,
	90,
	87,
	84,
	81,
	79,
	76,
	73,
	71,
	69,
	67,
	64,
	62,
	60,
	58,
	57,
	55,
	53,
	51,
	50,
	48,
	47,
	45,
	44,
	42,
	41,
	40,
	39,
	38,
	36,
	35,
	34,
	33,
	32,
	31,
	30,
	29,
	29,
	28,
	27,
	26,
	25,
	25,
	24,
	23,
	23,
	22,
};

int con_temp[] = {
	-40,
	-39,
	-38,
	-37,
	-36,
	-35,
	-34,
	-33,
	-32,
	-31,
	-30,
	-29,
	-28,
	-27,
	-26,
	-25,
	-24,
	-23,
	-22,
	-21,
	-20,
	-19,
	-18,
	-17,
	-16,
	-15,
	-14,
	-13,
	-12,
	-11,
	-10,
	-9,
	-8,
	-7,
	-6,
	-5,
	-4,
	-3,
	-2,
	-1,
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	27,
	28,
	29,
	30,
	31,
	32,
	33,
	34,
	35,
	36,
	37,
	38,
	39,
	40,
	41,
	42,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	53,
	54,
	55,
	56,
	57,
	58,
	59,
	60,
	61,
	62,
	63,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
};
int con_temp_7125[] = {
	-40,
	-39,
	-38,
	-37,
	-36,
	-35,
	-34,
	-33,
	-32,
	-31,
	-30,
	-29,
	-28,
	-27,
	-26,
	-25,
	-24,
	-23,
	-22,
	-21,
	-20,
	-19,
	-18,
	-17,
	-16,
	-15,
	-14,
	-13,
	-12,
	-11,
	-10,
	-9,
	-8,
	-7,
	-6,
	-5,
	-4,
	-3,
	-2,
	-1,
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	27,
	28,
	29,
	30,
	31,
	32,
	33,
	34,
	35,
	36,
	37,
	38,
	39,
	40,
	41,
	42,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	53,
	54,
	55,
	56,
	57,
	58,
	59,
	60,
	61,
	62,
	63,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,

};
int con_volt_7125[] = {
	1758,
	1755,
	1752,
	1749,
	1745,
	1742,
	1738,
	1733,
	1729,
	1724,
	1719,
	1714,
	1709,
	1703,
	1697,
	1691,
	1684,
	1677,
	1670,
	1662,
	1654,
	1645,
	1636,
	1627,
	1618,
	1608,
	1597,
	1586,
	1575,
	1563,
	1551,
	1538,
	1525,
	1512,
	1498,
	1483,
	1468,
	1453,
	1437,
	1421,
	1416,
	1398,
	1381,
	1362,
	1344,
	1325,
	1305,
	1286,
	1266,
	1245,
	1225,
	1204,
	1183,
	1161,
	1140,
	1118,
	1096,
	1075,
	1053,
	1031,
	1009,
	987,
	965,
	943,
	922,
	900,
	879,
	857,
	836,
	815,
	795,
	774,
	754,
	734,
	715,
	695,
	677,
	658,
	640,
	622,
	604,
	587,
	570,
	554,
	537,
	522,
	506,
	491,
	477,
	462,
	449,
	435,
	422,
	409,
	397,
	385,
	373,
	361,
	350,
	339,
	329,
	319,
	309,
	300,
	290,
	281,
	273,
	264,
	256,
	248,
	241,
	233,
	226,
	219,
	212,
	206,
	200,
	193,
	188,
	182,
	176,
	171,
	166,
	161,
	156,
	151,
	147,
	142,
	138,
	134,
	130,
	126,
	123,
	119,
	116,
	112,
	109,
	106,
	103,
	100,
	97,

};
#endif /* __OP_CHARGE_H__ */
